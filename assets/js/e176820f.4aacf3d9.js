"use strict";(self.webpackChunkdocs_new=self.webpackChunkdocs_new||[]).push([[294],{7455:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"get-started/installation/docker","title":"Docker","description":"Step-by-step guide for running drasyl within Docker.","source":"@site/docs/get-started/installation/docker.md","sourceDirName":"get-started/installation","slug":"/get-started/installation/docker","permalink":"/get-started/installation/docker","draft":false,"unlisted":false,"editUrl":"https://github.com/drasyl/docs.drasyl.org/blob/master/docs/get-started/installation/docker.md","tags":[],"version":"current","lastUpdatedAt":1755540131000,"frontMatter":{"title":"Docker","description":"Step-by-step guide for running drasyl within Docker.","pagination_prev":null,"pagination_next":"get-started/first-network"},"sidebar":"tutorialSidebar","next":{"title":"Your First Network","permalink":"/get-started/first-network"}}');var a=t(4848),s=t(8453);const o={title:"Docker",description:"Step-by-step guide for running drasyl within Docker.",pagination_prev:null,pagination_next:"get-started/first-network"},d="Running drasyl within Docker",i={},c=[{value:"Make drasyl Network Available to Docker Host",id:"make-drasyl-network-available-to-docker-host",level:2},{value:"Step 1: Start the Docker container",id:"step-1-start-the-docker-container",level:3},{value:"Step 2: Add Device to Network",id:"step-2-add-device-to-network",level:3},{value:"Docker Compose",id:"docker-compose",level:3},{value:"Share drasyl Network to Other Docker Containers",id:"share-drasyl-network-to-other-docker-containers",level:2},{value:"Step 1: Start the Docker container",id:"step-1-start-the-docker-container-1",level:3},{value:"Step 2: Add Device to Network",id:"step-2-add-device-to-network-1",level:3},{value:"Docker Compose",id:"docker-compose-1",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"running-drasyl-within-docker",children:"Running drasyl within Docker"})}),"\n",(0,a.jsx)(n.p,{children:"This guide explains how to run drasyl within Docker. You can either make the drasyl network available to the Docker host or to other containers."}),"\n",(0,a.jsx)(n.admonition,{title:"Linux-only Support",type:"info",children:(0,a.jsx)(n.p,{children:"The drasyl agent requires a TUN device to process network packets at the IP level. TUN device functionality within Docker is only reliably supported on Linux hosts."})}),"\n",(0,a.jsx)(n.h2,{id:"make-drasyl-network-available-to-docker-host",children:"Make drasyl Network Available to Docker Host"}),"\n",(0,a.jsx)(n.p,{children:"In this approach, the drasyl agent runs inside a Docker container that is attached to the host's network stack. By using the host's network namespace, the container can create and manage a TUN interface that appears directly on the Docker host. This allows the host system to access the drasyl network."}),"\n",(0,a.jsx)(n.h3,{id:"step-1-start-the-docker-container",children:"Step 1: Start the Docker container"}),"\n",(0,a.jsxs)(n.p,{children:["Start the drasyl Docker container with the required parameters. The ",(0,a.jsx)(n.code,{children:"--cap-add=NET_ADMIN"})," and ",(0,a.jsx)(n.code,{children:"--device=/dev/net/tun"})," parameters are required because drasyl needs to create and configure TUN devices for IP packet processing. The ",(0,a.jsx)(n.code,{children:"--volume drasyl:/drasyl"})," parameter ensures that the device's drasyl identity and joined networks are persisted. The ",(0,a.jsx)(n.code,{children:"--network host"})," parameter allows the container to share the same network namespace as the host."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker run --detach --name drasyl \\\n  --cap-add=NET_ADMIN \\\n  --device=/dev/net/tun \\\n  --volume drasyl:/drasyl \\\n  --network host \\\n  drasyl/drasyl:latest \\\n  run\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"--rm"})," flag only removes the container when stopped. Data in the ",(0,a.jsx)(n.code,{children:"drasyl"})," named volume (such as identity and joined networks) remains persisted."]}),"\n",(0,a.jsx)(n.h3,{id:"step-2-add-device-to-network",children:"Step 2: Add Device to Network"}),"\n",(0,a.jsxs)(n.p,{children:["Retrieve the public key so you can add this device to your network configuration. If you have not yet created a network, see the ",(0,a.jsx)(n.a,{href:"https://docs.drasyl.org/get-started/first-network",children:"first network setup guide"})," for instructions. The public key is displayed in the container logs when starting:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker logs drasyl\n"})}),"\n",(0,a.jsx)(n.p,{children:"Alternatively, you can query it from the running container:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker exec -ti drasyl drasyl status\n"})}),"\n",(0,a.jsx)(n.p,{children:"Then add the device to your network configuration:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker exec -ti drasyl drasyl add https://example.com/my-network.toml\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The device should now join the network and create a corresponding network interface. You can monitor this process using the ",(0,a.jsx)(n.code,{children:"drasyl status"})," command. Once the node has joined the network, you can access the drasyl network from the Docker host."]}),"\n",(0,a.jsx)(n.h3,{id:"docker-compose",children:"Docker Compose"}),"\n",(0,a.jsx)(n.p,{children:"If you prefer to use Docker Compose, you can find an example below that you can adapt to your preferences:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="docker-compose.yml"',children:"version: '3.8'\nservices:\n  drasyl:\n    image: drasyl/drasyl:latest\n    container_name: drasyl\n    command: run\n    volumes:\n      - drasyl:/drasyl\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun\n    network_mode: host\n    restart: unless-stopped\nvolumes:\n  drasyl:\n      name: drasyl\n"})}),"\n",(0,a.jsx)(n.h2,{id:"share-drasyl-network-to-other-docker-containers",children:"Share drasyl Network to Other Docker Containers"}),"\n",(0,a.jsx)(n.p,{children:"In this approach, the drasyl agent runs inside a Docker container with its own dedicated network namespace. Other containers can join this namespace to access the drasyl network directly."}),"\n",(0,a.jsx)(n.h3,{id:"step-1-start-the-docker-container-1",children:"Step 1: Start the Docker container"}),"\n",(0,a.jsxs)(n.p,{children:["Start the drasyl Docker container with the required parameters. The ",(0,a.jsx)(n.code,{children:"--cap-add=NET_ADMIN"})," and ",(0,a.jsx)(n.code,{children:"--device=/dev/net/tun"})," parameters are required because drasyl needs to create and configure TUN devices for IP packet processing. The ",(0,a.jsx)(n.code,{children:"--volume drasyl:/drasyl"})," parameter ensures that the device's drasyl identity and joined networks are persisted."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker run --detach --name drasyl \\\n  --cap-add=NET_ADMIN \\\n  --device=/dev/net/tun \\\n  --volume drasyl:/drasyl \\\n  drasyl/drasyl:latest \\\n  run\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-2-add-device-to-network-1",children:"Step 2: Add Device to Network"}),"\n",(0,a.jsxs)(n.p,{children:["Retrieve the public key so you can add this device to your network configuration. If you have not yet created a network, see the ",(0,a.jsx)(n.a,{href:"https://docs.drasyl.org/get-started/first-network",children:"first network setup guide"})," for instructions. The public key is displayed in the container logs when starting:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker logs drasyl\n"})}),"\n",(0,a.jsx)(n.p,{children:"Alternatively, you can query it from the running container:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker exec -ti drasyl drasyl status\n"})}),"\n",(0,a.jsx)(n.p,{children:"Then add the device to your network configuration:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker exec -ti drasyl drasyl add https://example.com/my-network.toml\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The device should now join the network and create a corresponding network interface. You can monitor this process using the ",(0,a.jsx)(n.code,{children:"drasyl status"})," command. Once the node has joined the network, you can create additional containers that share the same network namespace. For example, to run an nginx web server:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker run --rm --name nginx \\\n  --network container:drasyl \\\n  nginx:latest\n"})}),"\n",(0,a.jsx)(n.p,{children:"With this setup, other drasyl devices can reach the nginx service running in the sidecar container through the drasyl network."}),"\n",(0,a.jsx)(n.h3,{id:"docker-compose-1",children:"Docker Compose"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="docker-compose.yml"',children:"version: '3.8'\nservices:\n  drasyl:\n    image: drasyl/drasyl:latest\n    container_name: drasyl\n    command: run\n    volumes:\n      - drasyl:/drasyl\n    cap_add:\n      - NET_ADMIN\n    devices:\n      - /dev/net/tun\n    restart: unless-stopped\n\n  nginx:\n    image: nginx:latest\n    container_name: nginx-sidecar\n    network_mode: service:drasyl\n    depends_on:\n      - drasyl\n    restart: unless-stopped\n\nvolumes:\n  drasyl:\n    name: drasyl\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var r=t(6540);const a={},s=r.createContext(a);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);